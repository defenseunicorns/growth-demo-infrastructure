name: Deploy Burn the Boats
on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      vpc:
        required: true
        type: boolean
      irsa:
        required: true
        type: boolean
      cluster:
        required: true
        type: boolean
      swf:
        required: true
        type: boolean
      bundles:
        required: true
        type: boolean

permissions:
  contents: read
  id-token: write
  packages: read

jobs:
  check_changes:
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    outputs:
      vpc_changes: ${{ steps.changes.outputs.vpc }}
      irsa_changes: ${{ steps.changes.outputs.irsa }}
      cluster_changes: ${{ steps.changes.outputs.cluster }}
      swf_changes: ${{ steps.changes.outputs.swf }}
      bundle_changes: ${{ steps.changes.outputs.bundle }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Check paths
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            vpc:
              - 'terraform/vpc/**'
              - 'env/btb/vpc.tfvars'
              - '.github/actions/terraform-deploy/**'
              - '.github/workflows/**'
            irsa:
              - 'terraform/irsa/**'
              - 'env/btb/irsa.tfvars'
              - '.github/actions/terraform-deploy/**'
              - '.github/workflows/**'
            cluster:
              - 'terraform/cluster/**'
              - 'env/btb/cluster.tfvars'
              - '.github/actions/terraform-deploy/**'
              - '.github/workflows/**'
            swf:  
              - 'terraform/swf/**'
              - 'modules/irsa-s3/**'
              - 'modules/irsa-rdb/**'
              - 'modules/irsa-elasticache/**'
              - 'env/btb/swf.tfvars'
              - '.github/actions/terraform-deploy/**'
              - '.github/workflows/**'
            bundle:
              - 'bundles/**'
              - 'tasks/**'
              - '.github/workflows/**'
  
  deploy_vpc:
    needs: check_changes
    if: |
      ( !cancelled() ) &&
      ( needs.check_changes.result == 'success' || needs.check_changes.result == 'skipped' ) &&
      ( needs.check_changes.outputs.vpc_changes == 'true' || inputs.vpc )
    environment: btb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb
          target: vpc
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_irsa:
    needs: check_changes
    if: |
      ( !cancelled() ) &&
      ( needs.check_changes.result == 'success' || needs.check_changes.result == 'skipped' ) &&
      ( needs.check_changes.outputs.irsa_changes == 'true' || inputs.irsa )
    environment: btb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb
          target: irsa
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_cluster:
    needs:
      - check_changes
      - deploy_vpc
      - deploy_irsa
    if: |
      ( !cancelled() ) &&
      ( needs.check_changes.result == 'success' || needs.check_changes.result == 'skipped' ) &&
      ( needs.deploy_vpc.result == 'success' || needs.deploy_vpc.result == 'skipped' ) &&
      ( needs.deploy_irsa.result == 'success' || needs.deploy_irsa.result == 'skipped' ) &&
      ( needs.check_changes.outputs.cluster_changes == 'true' || inputs.cluster )
    environment: btb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb
          target: cluster
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_swf:
    needs:
      - check_changes
      - deploy_cluster
    if: |
      ( !cancelled() ) &&
      ( needs.check_changes.result == 'success' || needs.check_changes.result == 'skipped' ) &&
      ( needs.deploy_cluster.result == 'success' || needs.deploy_cluster.result == 'skipped' ) &&
      ( needs.check_changes.outputs.swf_changes == 'true' || inputs.swf )
    environment: btb
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb
          target: swf
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_bundles:
    needs:
      - check_changes
      - deploy_cluster
      - deploy_swf
    if: |
      ( !cancelled() ) &&
      ( needs.check_changes.result == 'success' || needs.check_changes.result == 'skipped' ) &&
      ( needs.deploy_cluster.result == 'success' || needs.deploy_cluster.result == 'skipped' ) &&
      ( needs.deploy_swf.result == 'success' || needs.deploy_swf.result == 'skipped' ) &&
      ( needs.check_changes.outputs.bundle_changes == 'true' || inputs.bundles )
    environment: btb
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v4

      - name: Setup runner
        shell: bash
        run: uds run setup
        env:
          ENVIRONMENT: btb

      - name: GHCR Login
        run: zarf tools registry login -u "dummy" -p "${{ secrets.GITHUB_TOKEN }}" ghcr.io

      - name: Create the base bundle
        shell: bash
        run: uds run create-base

      - name: Deploy the base bundle
        shell: bash
        run: uds run deploy-base
        env:
          UDS_ADMIN_TLS_CERT: ${{ secrets.UDS_ADMIN_TLS_CERT }}
          UDS_ADMIN_TLS_KEY: ${{ secrets.UDS_ADMIN_TLS_KEY }}
          UDS_TENANT_TLS_CERT: ${{ secrets.UDS_TENANT_TLS_CERT }}
          UDS_TENANT_TLS_KEY: ${{ secrets.UDS_TENANT_TLS_KEY }}
          UDS_DOMAIN: ${{ vars.UDS_DOMAIN }}
          UDS_REGION: ${{ vars.AWS_REGION }}

      - name: Create the SWF bundle
        shell: bash
        run: uds run create-swf
      
      - name: Deploy the swf bundle
        shell: bash
        run: uds run deploy-swf
        env:
          UDS_DOMAIN: ${{ vars.UDS_DOMAIN }}

      - name: Save logs
        if: always()
        uses: ./.github/actions/save-logs
