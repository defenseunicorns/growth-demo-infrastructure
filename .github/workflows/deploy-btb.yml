name: Deploy Burn the Boats
on:
  push:
    branches:
      - main

permissions:
  contents: read
  id-token: write

jobs:
  check_changes:
    runs-on: ubuntu-latest
    outputs:
      vpc_changes: ${{ steps.changes.outputs.vpc }}
      irsa_changes: ${{ steps.changes.outputs.irsa }}
      cluster_changes: ${{ steps.changes.outputs.cluster }}
      swf_changes: ${{ steps.changes.outputs.swf }}
    steps:
      - name: Checkout the code
        uses: actions/checkout@v4
      - name: Check paths
        uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            vpc:
              - 'terraform/vpc/**'
              - 'env/burn-the-boats/vpc.tfvars'
              - '.github/actions/terraform-deploy/**'
            irsa:
              - 'terraform/irsa/**'
              - 'env/burn-the-boats/irsa.tfvars'
              - '.github/actions/terraform-deploy/**'
            cluster:
              - 'terraform/cluster/**'
              - 'env/burn-the-boats/cluster.tfvars'
              - '.github/actions/terraform-deploy/**'
            swf:  
              - 'terraform/swf/**'
              - 'modules/irsa-s3/**'
              - 'modules/irsa-rdb/**'
              - 'modules/irsa-elasticache/**'
              - 'env/burn-the-boats/swf.tfvars'
              - '.github/actions/terraform-deploy/**' 

  deploy_vpc:
    needs: check_changes
    if: needs.check_changes.outputs.vpc_changes == 'true'
    environment: burn-the-boats
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: burn-the-boats
          target: vpc
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_irsa:
    needs: check_changes
    if: needs.check_changes.outputs.irsa_changes == 'true'
    environment: burn-the-boats
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: burn-the-boats
          target: irsa
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_cluster:
    needs:
      - check_changes
      - deploy_vpc
      - deploy_irsa
    if: ${{ always() && ( needs.deploy_vpc.result == 'success' || needs.deploy_vpc.result == 'skipped' ) && ( needs.deploy_irsa.result == 'success' || needs.deploy_irsa.result == 'skipped' ) && needs.check_changes.outputs.cluster_changes == 'true' }}
    environment: burn-the-boats
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: burn-the-boats
          target: cluster
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_swf:
    needs:
      - check_changes
      - deploy_cluster
    if: ${{ always() && ( needs.deploy_cluster.result == 'success' || needs.deploy_cluster.result == 'skipped' ) && needs.check_changes.outputs.swf_changes == 'true' }}
    environment: burn-the-boats
    runs-on: ubuntu_latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: burn-the-boats
          target: swf
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}
