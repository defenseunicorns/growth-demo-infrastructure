name: Deploy platform stack to Staging
on:
  push:
    branches:
      - main
    paths:
      - 'terraform/platform/**.tf'

permissions:
  contents: read
  id-token: write

jobs:
  deploy-platform-stack:
    environment: staging
    defaults:
      run:
        working-directory: './terraform/platform/'
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
        role-session-name: ${{ github.job || github.event.client_payload.pull_request.head.sha || github.sha  }}
        aws-region: ${{ vars.AWS_REGION }}
        role-duration-seconds: 3600

    - uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: "1.5.7"
    - name: Run Terraform Apply
      env:
        TF_VAR_cidr: ${{ vars.VPC_CIDR }}
        TF_VAR_num_azs: ${{ vars.VPC_NUM_AZS }}
        TF_VAR_region: ${{ vars.AWS_REGION }}
        TF_VAR_secondary_cidr_blocks: ${{ vars.VPC_SECONDARY_CIDR_BLOCKS }}
        TF_VAR_stage: ${{ vars.STAGE }}
        TF_VAR_vpc_flow_log_permissions_boundary: ${{ vars.PERMISSIONS_BOUNDARY }}
        TF_VAR_vpc_name: ${{ vars.VPC_NAME }}
      run: |
        terraform init \
          -backend-config="region=${{ vars.AWS_REGION }}" \
          -backend-config="bucket=${{ vars.STATE_BUCKET }}" \
          -backend-config="key=${{ vars.STATE_KEY_PLATFORM }}" \
          -backend-config="dynamodb_table=${{ vars.LOCK_TABLE }}"
        terraform apply -auto-approve
