name: Deploy Burn the Boats to Prod
on:
  workflow_dispatch:
    inputs:
      vpc:
        required: true
        type: boolean
      irsa:
        required: true
        type: boolean
      cluster:
        required: true
        type: boolean
      swf:
        required: true
        type: boolean
      bundles:
        required: true
        type: boolean

permissions:
  contents: read
  id-token: write
  packages: read

jobs:
  deploy_vpc:
    if: ( !cancelled() ) && inputs.vpc
    environment: btb-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb-prod
          target: vpc
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_irsa:
    if: ( !cancelled() ) && inputs.irsa
    environment: btb-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb-prod
          target: irsa
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_cluster:
    needs:
      - deploy_vpc
      - deploy_irsa
    if: |
      ( !cancelled() ) && inputs.cluster &&
      ( needs.deploy_vpc.result == 'success' || needs.deploy_vpc.result == 'skipped' ) &&
      ( needs.deploy_irsa.result == 'success' || needs.deploy_irsa.result == 'skipped' )
    environment: btb-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb-prod
          target: cluster
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_swf:
    needs:
      - deploy_cluster
    if: |
      ( !cancelled() ) && inputs.swf &&
      ( needs.deploy_cluster.result == 'success' || needs.deploy_cluster.result == 'skipped' )
    environment: btb-prod
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: ./.github/actions/terraform-deploy
        with:
          environment: btb-prod
          target: swf
        env:
          AWS_GOVCLOUD_ROLE_TO_ASSUME: ${{ secrets.AWS_GOVCLOUD_ROLE_TO_ASSUME }}
          AWS_REGION: ${{ vars.AWS_REGION }}
          PERMISSIONS_BOUNDARY: ${{ vars.PERMISSIONS_BOUNDARY }}
          STATE_BUCKET: ${{ vars.STATE_BUCKET }}
          LOCK_TABLE: ${{ vars.LOCK_TABLE }}

  deploy_bundles:
    needs:
      - deploy_cluster
      - deploy_swf
    if: |
      ( !cancelled() ) && inputs.bundles &&
      ( needs.deploy_cluster.result == 'success' || needs.deploy_cluster.result == 'skipped' ) &&
      ( needs.deploy_swf.result == 'success' || needs.deploy_swf.result == 'skipped' )
    environment: btb-prod
    runs-on: [self-hosted, prod]
    steps:
      - uses: actions/checkout@v4

      - name: Setup runner
        shell: bash
        run: uds run setup
        env:
          ENVIRONMENT: btb-prod

      - name: GHCR Login
        run: zarf tools registry login -u "dummy" -p "${{ secrets.GITHUB_TOKEN }}" ghcr.io

      - name: Create the base bundle
        shell: bash
        run: uds run create-base

      - name: Deploy the base bundle
        shell: bash
        run: uds run deploy-base
        env:
          UDS_ADMIN_TLS_CERT: ${{ secrets.UDS_ADMIN_TLS_CERT }}
          UDS_ADMIN_TLS_KEY: ${{ secrets.UDS_ADMIN_TLS_KEY }}
          UDS_TENANT_TLS_CERT: ${{ secrets.UDS_TENANT_TLS_CERT }}
          UDS_TENANT_TLS_KEY: ${{ secrets.UDS_TENANT_TLS_KEY }}
          UDS_DOMAIN: ${{ vars.UDS_DOMAIN }}
          UDS_REGION: ${{ vars.AWS_REGION }}
          ENVIRONMENT: btb-prod

      - name: Create the SWF bundle
        shell: bash
        run: uds run create-swf

      - name: Deploy the swf bundle
        shell: bash
        run: uds run deploy-swf
        env:
          UDS_DOMAIN: ${{ vars.UDS_DOMAIN }}
          ENVIRONMENT: btb-prod

      - name: Save logs
        if: always()
        uses: ./.github/actions/save-logs
